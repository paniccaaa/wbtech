// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	kafka "github.com/confluentinc/confluent-kafka-go/v2/kafka"
	mock "github.com/stretchr/testify/mock"
)

// Poller is an autogenerated mock type for the Poller type
type Poller struct {
	mock.Mock
}

// Poll provides a mock function with given fields: timeoutMs
func (_m *Poller) Poll(timeoutMs int) kafka.Event {
	ret := _m.Called(timeoutMs)

	if len(ret) == 0 {
		panic("no return value specified for Poll")
	}

	var r0 kafka.Event
	if rf, ok := ret.Get(0).(func(int) kafka.Event); ok {
		r0 = rf(timeoutMs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(kafka.Event)
		}
	}

	return r0
}

// NewPoller creates a new instance of Poller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPoller(t interface {
	mock.TestingT
	Cleanup(func())
}) *Poller {
	mock := &Poller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
