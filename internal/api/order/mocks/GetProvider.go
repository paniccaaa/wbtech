// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/paniccaaa/wbtech/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// GetProvider is an autogenerated mock type for the GetProvider type
type GetProvider struct {
	mock.Mock
}

// GetOrder provides a mock function with given fields: ctx, orderUID
func (_m *GetProvider) GetOrder(ctx context.Context, orderUID model.OrderUID) (model.Order, error) {
	ret := _m.Called(ctx, orderUID)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderUID) (model.Order, error)); ok {
		return rf(ctx, orderUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderUID) model.Order); ok {
		r0 = rf(ctx, orderUID)
	} else {
		r0 = ret.Get(0).(model.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderUID) error); ok {
		r1 = rf(ctx, orderUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGetProvider creates a new instance of GetProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGetProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *GetProvider {
	mock := &GetProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
